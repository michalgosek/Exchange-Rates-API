// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the exchange rates for cryptocurrencies based on a preconfigured exchange rates table.
	// (GET /api/v1/exchange)
	GetCryptoExchangeRate(c *gin.Context, params GetCryptoExchangeRateParams)
	// Returns the latest exchange rates.
	// (GET /api/v1/rates)
	GetGlobalExchangeRates(c *gin.Context, params GetGlobalExchangeRatesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCryptoExchangeRate operation middleware
func (siw *ServerInterfaceWrapper) GetCryptoExchangeRate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCryptoExchangeRateParams

	// ------------- Required query parameter "from" -------------

	if paramValue := c.Query("from"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument from is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", c.Request.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "to" -------------

	if paramValue := c.Query("to"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument to is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "to", c.Request.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "amount" -------------

	if paramValue := c.Query("amount"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument amount is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "amount", c.Request.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter amount: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCryptoExchangeRate(c, params)
}

// GetGlobalExchangeRates operation middleware
func (siw *ServerInterfaceWrapper) GetGlobalExchangeRates(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGlobalExchangeRatesParams

	// ------------- Required query parameter "currencies" -------------

	if paramValue := c.Query("currencies"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument currencies is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "currencies", c.Request.URL.Query(), &params.Currencies)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter currencies: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGlobalExchangeRates(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/exchange", wrapper.GetCryptoExchangeRate)
	router.GET(options.BaseURL+"/api/v1/rates", wrapper.GetGlobalExchangeRates)
}
